plot(sp)
sp <- ns(xValues,df=4)
plot(sp)
sp <- ns(xValues,df=7)
sp <- ns(xValues,df=7)
plot(sp)
sp
sp <- ns(xValues,df=3)
plot(sp)
sp
xValues[99:100]
sp <- ns(xValues,df=2)
plot(sp[1],sp[2])
plot(sp[,1],sp[,2])
for (i in 1:10){
spi <- ns(xValues,df=i);
asefw
sd
ds
ds
q
4
r
sp <- ns(xValues,df=2)
zdsh
tfade][ld]
hefda
r
rhg
rf
gr
for (i in 1:10){
spi <- ns(xValues,df=i)
for (i in 1:10){
spi <- ns(xValues,df=i)
for (i in 1:10){
spi <- ns(xValues,df=i)
for (i in 1:10){
spi <- ns(xValues,df=i)
for (i in 1:10){
spi <- ns(xValues,df=i)
c
c
c
?
}
source('~/.active-rstudio-document')
for (i in 1:10){
sp <- ns(xValues,df=i)
f <- lm(yValues ~ sp)
r[i]<-rmse(f$fitted,yValues)
}
plot(r)
r
for (i in 1:10){
sp <- ns(xValues,df=i)
f <- lm(yValues ~ sp)
r[i]<-rmse(f$fitted,yValues)
}
i<-1
sp <- ns(xValues,df=i)
f <- lm(yValues ~ sp)
sp
f
rmse(f$fitted,yValues)
r
r<-seq(NA,10)
r<-seq(10,NA)
r<-seq(NA,10)
?seq
r<-rep(NA,10)
for (i in 1:10){
sp <- ns(xValues,df=i)
f <- lm(yValues ~ sp)
r[i]<-rmse(f$fitted,yValues)
}
plot(r)
str(f$fitted)
e
plot(xValues,yValues)
plot(yValues,xValues)
plot(xValues,yValues)
i=1
ncs <- ns(xValues,df=i)
lmf <- lm(yValues ~ ncs)
plot(xValues,ncs[,1])
plot(xValues,ncs[,2])
i=2
ncs <- ns(xValues,df=i)
lmf <- lm(yValues ~ ncs)
plot(xValues,ncs[,1])
plot(xValues,ncs[,2])
i=3
ncs <- ns(xValues,df=i)
lmf <- lm(yValues ~ ncs)
plot(xValues,ncs[,1])
plot(xValues,ncs[,2])
plot(xValues,ncs[,3])
par(mfrow=c(1,i))
for (j in 1:i) plot(xValues,ncs[,i])
par(mfrow=c(1,i))
for (j in 1:i) plot(xValues,ncs[,j])
library(simpleboot)
data(airquality)
attach(airquality)
names(airquality)
Day
one.boot
?percentile
??percentile
??quantile
?quantile
example(quantile)
quantile(Wind)
quantile(Wind)[4]
Wind
quantile(Wind)
hist(Wind)
median(Wind)
?one.boot
one.boot(data=Wind,FUN=quantile,R=1000)
one.boot(data=Wind,FUN=mean,R=1000)
quantile(34)
quantile(34,45)
quantile(c(34,45)
)
quantile(c(34,45))
?quantile
one.boot(data=Wind,FUN=quantile(probs=0.75),R=1000)
one.boot(data=Wind,FUN=quantile(x,probs=0.75),R=1000)
one.boot(data=Wind,FUN=quantile(probs=0.75),R=1000)
one.boot(data=Wind,FUN=(quantile,probs=0.75),R=1000)
one.boot(data=Wind,(quantile,=0.75),R=1000)
one.boot(data=Wind,(quantile,0.75),R=1000)
one.boot(data=Wind,FUN=quantile,R=1000,probs=.75)
ob<-one.boot(data=Wind,FUN=quantile,R=1000,probs=.75)
ob
names(ob)
ob
names(ob)
ob[1]
ob[2]
ob[1]
ob[3]
ob[4]
names(ob)
?one.boot
ob[1]
ob[2]
sd(ob[2])
std(ob[2])
sd(ob[2])
?sd
sd(ob[[2]])
set.seed(883833)
one.boot(data=Wind,FUN=quantile,R=1000,probs=.75)
sd(ob[[2]])
ob
names(ob)
ob$R
ob$seed
names(ob)
3833)
quantile(Wind)[4]
ob<-one.boot(data=Wind,FUN=quantile,R=1000,probs=.75)
ob$t0;sd(ob
)
ob$t0;sd(ob$t)
set.seed(883833)
quantile(Wind)[4]
ob<-one.boot(data=Wind,FUN=quantile,R=1000,probs=.75)
ob$t0;sd(ob$t)
data(Cars93,package="MASS")
set.seed(7363)
newdata = data.frame(Type = "Large",Price = 20)
newdata
library(boot); library(tree)
data(Cars93,package="MASS")
set.seed(7363)
newdata = data.frame(Type = "Large",Price = 20)
bstree <- function(d,i,newdata){
samDT <- DriveTrain[i]
tf <- tree(DriveTrain ~ Price + Type, data=d)
pred.bs <- predict(tf,newdata)
return(pred.bs)
}
bst <- boot(Cars93,nuke.fun,R=1000,newdata=newdata)
bst <- boot(Cars93,bstree,R=1000,newdata=newdata)
bst <- boot(data=Cars93,bstree,R=1000,newdata=newdata)
?boot
bst <- boot(data=Cars93,statistic=bstree,R=1000,newdata=newdata)
data(Cars93,package="MASS");attach(Cars93)
bst <- boot(data=Cars93,statistic=bstree,R=1000,newdata=newdata)
str(bst$t)
bst$statistic
bst$t0
DriveTrain
bst <- boot(data=Cars93,statistic=bstree,R=3,newdata=newdata)
bst$t0
bst$t1
bst$t
bstree <- function(data,i,nd){
samDT <- DriveTrain[i]
tf <- tree(DriveTrain ~ Price + Type, data=data)
pred.bs <- predict(tf,nd)
return(pred.bs)
}
bst <- boot(data=Cars93,statistic=bstree,R=3,nd=newdata)
bst$t
bst$t0
bst$data
bst$t
bst$t0
set.seed(7363)
newdata = data.frame(Type = "Large",Price = 20)
bstree <- function(data,i,nd){
samDT <- DriveTrain[i]
tf <- tree(DriveTrain ~ Price + Type, data=data)
pred.bs <- predict(tf,nd)
return(pred.bs)
}
bst <- boot(data=Cars93,statistic=bstree,R=3,nd=newdata)
bst$t0;bst$t
bstree <- function(data,i,nd){
data <- data[i]
tf <- tree(DriveTrain ~ Price + Type, data=data)
pred.bs <- predict(tf,nd)
return(pred.bs)
}
bst <- boot(data=Cars93,statistic=bstree,R=3,nd=newdata)
bst$t0;bst$t
bstree <- function(data,i,nd){
data <- data[i,]
tf <- tree(DriveTrain ~ Price + Type, data=data)
pred.bs <- predict(tf,nd)
return(pred.bs)
}
bst <- boot(data=Cars93,statistic=bstree,R=3,nd=newdata)
bst$t0;bst$t
bstree <- function(data,i,nd){
samdata <- data[i,]
tf <- tree(DriveTrain ~ Price + Type, data=samdata)
pred.bs <- predict(tf,nd)
return(pred.bs)
}
bst <- boot(data=Cars93,statistic=bstree,R=3,nd=newdata)
bst$t0;bst$t
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowel.train)
names(vowel.test)
names(vowel.train)==names(vowel.test)
vtr<-vowel.train
vte<-vowel.test
vtr.y <- factor(vtr.y)
vtr$y <- factor(vtr$y)
vtr$y <- factor(vtr$y); vte$y <- factor(vte$y)
library(e1071)
install.packages(e1071)
install.packages("e1071")
library(e1071)
?randomForest
library(randomForest)
install.packages("randomForest")
library(randomForest)
?randomForest
rf <- randomForest(y ~ ., data = vtr)
predict(rf,vte.y)
predict(rf,vte$y)
rf
rm(ls())
rm(list=ls())
library(ElemStatLearn)
library(randomForests)
library(e1071)
data(vowel.train); data(vowel.test)
vtr <- vowel.train; vte <- vowel.test
vtr$y <- factor(vtr$y); vte$y <- factor(vte$y)
set.seed(33833)
rf <- randomForest(y ~ ., data = vtr)
predict(rf,vte$y)
rf
names(rf)
rf$confusion
rf$confusion[1,]
rf$type
rf$predicted
rf$err.rate
str(rf$err.rate)
rf$err.rate[1,]
?svm
rf <- randomForest(y ~ ., data = vtr)
sv <- svm(y ~ ., data = vtr)
predict(rf,vte$y)
sv
predict(rfo,vte$y)
rfo
rfo <- randomForest(y ~ ., data = vtr)
rfo
predict(rfo,vte$y)
?predict
predict(rfo,y,data=vte)
vte
names(vte)
predict(rfo,y,data=vte)
predict(rfo,y,as.data.frame(vte))
predict(rfo,y,newdata=vte)
predict(rfo,y)
predict(rfo,vte$y)
vte$y
predict(rfo,vte)
p<-predict(rfo,vte)
str(p)
psv <- predict(svo,vte)
svo <- svm(y ~ ., data = vtr)
psv <- predict(svo,vte)
prf
prf <- predict(rfo,vte)
prf
trf <- table(vte$y,prf)
tsv <- table(vte$y,psv)
trf
tsv
er(trf)
er <- function(t) 1 - sum(diag(t))/sum(t)
er(trf)
er(tsv)
tag <- table(prf,psv)
tag
er(tag)
set.seed(33833)
rfo <- randomForest(y ~ ., data = vtr)
svo <- svm(y ~ ., data = vtr)
prf <- predict(rfo,vte)
psv <- predict(svo,vte)
trf <- table(vte$y,prf)
tsv <- table(vte$y,psv)
er <- function(t) 1 - sum(diag(t))/sum(t)
er(trf)
er(tsv)
er(tag)
er(trf); er(tsv)
tag <- table(prf==psv,vte$y)
tag
tag <- table(prf[prf==psv],vte$y)
[prf==psv]
prf[prf==psv]
str(prf[prf==psv])
str(prf)
prf
psv
tag <- table(vte$y[prf==psv],prf[prf==psv])
tag
er(tag)
set.seed(33833)
rfo <- randomForest(y ~ ., data = vtr)
svo <- svm(y ~ ., data = vtr)
er <- function(t) 1 - sum(diag(t))/sum(t)
prf <- predict(rfo,vte)
psv <- predict(svo,vte)
trf <- table(vte$y,prf)
tsv <- table(vte$y,psv)
er(trf); er(tsv)
tag <- table(vte$y[prf==psv],prf[prf==psv])
er(tag)
set.seed(33833)
rfo <- randomForest(y ~ ., data = vtr)
svo <- svm(y ~ ., data = vtr)
er <- function(t) 1 - sum(diag(t))/sum(t)
prf <- predict(rfo,vte)
psv <- predict(svo,vte)
trf <- table(vte$y,prf)
tsv <- table(vte$y,psv)
er(trf); er(tsv)
tag <- table(vte$y[prf==psv],prf[prf==psv])
er(tag)
rm(list=ls())
library(boot); library(tree)
data(Cars93,package="MASS");attach(Cars93)
set.seed(7363)
newdata = data.frame(Type = "Large",Price = 20)
bstree <- function(data,i,nd){
samdata <- data[i,]
tf <- tree(DriveTrain ~ Price + Type, data=samdata)
pred.bs <- predict(tf,nd)
return(pred.bs)
}
bst <- boot(data=Cars93,statistic=bstree,R=3,nd=newdata)
bst$t0;bst$t
q()
set.seed(3343)
pValues = rep(NA,100)
for(i in 1:100){
z = rnorm(20)
x = rnorm(20)
y = rnorm(20,mean=0.5*x)
pValues[i] = summary(lm(y ~ x))$coef[2,4]
}
pValues
hist(pValues)
hist(pValues,100)
sum(pValues < 0.1)
sum(pValues < 0.05)
sum(pValues < 0.1)
sum(pValues < 0.9)
sum(pValues < 0.6)
sum(pValues < 0.7)
sum(pValues < 0.01)
sum(pValues < 0.1)
p.adjust(pValues,method="bonferroni")
hist(p.adjust(pValues,method="bonferroni"),100)
hist(p.adjust(pValues,method="BH"),100)
sum(p.adjust(pValues,method="bonferroni") < 0.1)
sum(p.adjust(pValues,method="BH") < 0.1)
y = b0 + b1*x + b2*z + e
b0<-1;b1<-2;b2<-3
y = b0 + b1*x + b2*z + e
e<-0
y = b0 + b1*x + b2*z + e
y
library(MASS)
source('~/.active-rstudio-document')
b0 <- 1
b1 <- 2
beta <- rep(NA,1000)
for (i in 1:1000) {
x <- rnorm(100)
e <- rnorm(100)
y <- bo + b1*x + e
beta[i] <- lm(y ~ x)$coeff[2]
rbeta[i] <- rlm(y ~ x)$coeff[2]
}
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
hist(beta)
qnorm(0)
qnorm(1)
qnorm(0.5)
qnorm(0.6)
qnorm(0.4)
pnorm(0.4)
pnorm(0)
pnorm(1)
pnorm(-1)
plot(qnorm)
plot(pnorm)
plot(pnorm,xlim=c(-1,1))
plot(pnorm,xlim=c(-10,10))
plot(pnorm,xlim=c(-5,5))
plot(pnorm,xlim=c(-3,3))
plot(qnorm)
qnorm(08)
qnorm(0.8)
qnorm(.8)
qnorm(.7)
qnorm(.9)
source('~/.active-rstudio-document')
hist(beta)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
(sb[i])
mean(xb[i]) - mean(sb[i])
xb[i] <- rlm(y ~ x)$coeff[2]
source('~/.active-rstudio-document')
mean(xb[i]) - mean(sb[i])
source('~/.active-rstudio-document')
mean(xb[i]) - mean(sb[i])
source('~/.active-rstudio-document')
mean(xb[i]) - mean(sb[i])
source('~/.active-rstudio-document')
mean(xb[i]) - mean(sb[i])
source('~/.active-rstudio-document')
mean(xb[i]) - mean(sb[i])
source('~/.active-rstudio-document')
mean(xb[i]) - mean(sb[i])
source('~/.active-rstudio-document')
mean(xb[i]) - mean(sb[i])
source('~/.active-rstudio-document')
mean(xb[i]) - mean(sb[i])
hist(y)
plot(x,y)
install.packages("rpart")
q()
install.packages("statnet")
exit()
quit()
library("statnet")
data("florentine")
search()
data()
summary(flomarriage)
model1 <- ergm(flomarriage âˆ¼ edges)
model1 <- ergm(flomarriage + edges)
model1 <- ergm(flomarriage ~ edges)
model1
summary(model1)
exp(model1$edges)
model1
exp(model1)
model1[0]
model1[1]
exp(model1$coef)
expp(-1.6)
exp(-1.6)
model2 <- ergm(flomarriage ~ edges + triangles)
model2
model2 <- ergm(flomarriage ~ edges + triangles)
model2
exit()
q()
